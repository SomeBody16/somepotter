buildscript {
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
    repositories {
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
//apply plugin: 'net.minecraftforge.gradle'
apply plugin: "org.spongepowered.mixin"

configurations {
    shade
    implementation.extendsFrom shade
}

group = project.maven_group
archivesBaseName = project.archives_base_name

def setVersionWithCommitCount(versionString) {
    if (versionString.contains("COMMIT_COUNT")) {
        try {
            def cmd = "git rev-list --count HEAD"
            def proc = cmd.execute()
            proc.waitFor()
            def commitCount = proc.in.text.trim()
            return versionString.replace("COMMIT_COUNT", commitCount)
        } catch (Exception e) {
            e.printStackTrace()
            return "0"
        }
    }
    return versionString
}

version = setVersionWithCommitCount(project.mod_version)


// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: 'official', version: '1.18.2'

    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'somepotter'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                somepotter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'somepotter'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                somepotter {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'somepotter'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                somepotter {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'somepotter', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                somepotter {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs '/libs'
    }
    maven { url 'https://cursemaven.com' }
    maven { url 'https://maven.lukegrahamlandry.ca' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://maven.theillusivec4.top/' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    compileOnly fg.deobf(files("libs/the_vault-${the_vault_version}.jar"))
    implementation fg.deobf(group: 'ca.lukegrahamlandry.lib', name: 'WrapperLib-1.18-Forge', version: "${wrapperlib_version}") { transitive false }

    shade "com.github.cluelab:dollar-recognizers-java:${dollar_recognizers_version}"
    minecraftLibrary "com.github.cluelab:dollar-recognizers-java:${dollar_recognizers_version}"

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

//    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")

    implementation fg.deobf("com.github.Virtuoel:Pehkui:${pehkui_version}")

    implementation(fg.deobf("curse.maven:blockui-${blockui_version}")) {
        transitive = false
    }
}

jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
jar.finalizedBy('reobfJar')

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.github.cluelab', 'network.something.cluelab'
    finalizedBy 'reobfShadowJar'
}
assemble.dependsOn shadowJar
reobf {
    shadowJar {}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('copyAfterBuild') {
    doFirst {
        // Check if the property is set
        if (project.hasProperty('copy_after_build')) {
            def targetDir = project.property('copy_after_build')
            targetDir = new File(targetDir).getAbsolutePath()

            def jarFile = "${buildDir}/libs/${archives_base_name}-${version}.jar"

            // Delete files starting with "somepotter" in the target directory
            file(targetDir).listFiles().findAll {
                it.name.startsWith("${archives_base_name}")
            }.each {
                it.delete()
            }

            // Copy the built jar to the target directory
            copy {
                from jarFile
                into targetDir
            }

            logger.lifecycle("Copied ${jarFile} to ${targetDir}")
        } else {
            logger.lifecycle("copy_after_build property is not set. Skipping copyAfterBuild task.")
        }
    }
}
build.finalizedBy(copyAfterBuild)

tasks.register('summary') {
    doLast {
        // Check if there is more than one commit
        def commitCount = 'git rev-list --count HEAD'.execute().text.trim()
        println "Total Commits: $commitCount"

        if (commitCount.toInteger() > 1) {
            // If more than one commit, show diff stats
            def gitDiffStats = 'git diff --shortstat HEAD~1'.execute().text.trim()
            println "Git Diff Stats: $gitDiffStats"
        } else {
            println "Not enough commits for diff stats"
        }

        // Size of the built file (assuming it's a jar) in megabytes
        def builtFile = file("$buildDir/libs/${archives_base_name}-${version}.jar")
        if (builtFile.exists()) {
            def fileSizeInMB = builtFile.length() / (1024 * 1024)
            println "Built File Size: ${String.format("%.2f", fileSizeInMB)} MB"
        } else {
            println "Built file not found"
        }
    }
}
build.finalizedBy(summary)
